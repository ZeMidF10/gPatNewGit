//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.9.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Glintths.MobileApps.Core.GPlatform.Generated.Mulesoft
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.9.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PatientsPatientClient : MulePatientEngagementClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PatientsPatientClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });

            this.BaseUrl = baseUrl;
        }

        private string _baseUrl = string.Empty;
        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Patient> IdAsync(string patient_id)
        {
            return IdAsync(patient_id, System.Threading.CancellationToken.None);
        }

        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Patient> IdAsync(string patient_id, System.Threading.CancellationToken cancellationToken)
        {
            if (patient_id == null)
                throw new System.ArgumentNullException("patient_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/patients/{patient_id}");
            urlBuilder_.Replace("{patient_id}", System.Uri.EscapeDataString(ConvertToString(patient_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Patient);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Patient>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new GPlatformMuleException<object>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Patient);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> IdRequestInfoUpdateAsync(Patient body, string patient_id)
        {
            return IdRequestInfoUpdateAsync(body, patient_id, System.Threading.CancellationToken.None);
        }

        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<string> IdRequestInfoUpdateAsync(Patient body, string patient_id, System.Threading.CancellationToken cancellationToken)
        {
            if (patient_id == null)
                throw new System.ArgumentNullException("patient_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/patients/{patient_id}/request-info-update");
            urlBuilder_.Replace("{patient_id}", System.Uri.EscapeDataString(ConvertToString(patient_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(string);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(string);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new GPlatformMuleException<string>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task IdDescendantsAsync(Descendant body, string patient_id)
        {
            return IdDescendantsAsync(body, patient_id, System.Threading.CancellationToken.None);
        }

        /// <returns>Patient successfully deleted.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task IdDeleteAsync(string patient_id)
        {
            return IdDeleteAsync(patient_id, System.Threading.CancellationToken.None);
        }

        /// <returns>Patient successfully deleted.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task IdDeleteAsync(string patient_id, System.Threading.CancellationToken cancellationToken)
        {
            if (patient_id == null)
                throw new System.ArgumentNullException("patient_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/patients/{patient_id}");
            urlBuilder_.Replace("{patient_id}", System.Uri.EscapeDataString(ConvertToString(patient_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        int status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new GPlatformMuleException<object>("Patient not found.\n", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != 200 && status_ != 204)
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }


        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task IdDescendantsAsync(Descendant body, string patient_id, System.Threading.CancellationToken cancellationToken)
        {
            if (patient_id == null)
                throw new System.ArgumentNullException("patient_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/patients/{patient_id}/descendants");
            urlBuilder_.Replace("{patient_id}", System.Uri.EscapeDataString(ConvertToString(patient_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201")
                        {
                            return;
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="skip">The number of elements to skip before returning the remaining elements</param>
        /// <param name="take">The number of elements to return</param>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DescendantCollectionItem>> IdDescendantsAsync(int skip, int take, string patient_id)
        {
            return IdDescendantsAsync(skip, take, patient_id, System.Threading.CancellationToken.None);
        }

        /// <param name="skip">The number of elements to skip before returning the remaining elements</param>
        /// <param name="take">The number of elements to return</param>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DescendantCollectionItem>> IdDescendantsAsync(int skip, int take, string patient_id, System.Threading.CancellationToken cancellationToken)
        {
            if (patient_id == null)
                throw new System.ArgumentNullException("patient_id");

            if (skip == null)
                throw new System.ArgumentNullException("skip");

            if (take == null)
                throw new System.ArgumentNullException("take");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/patients/{patient_id}/descendants?");
            urlBuilder_.Replace("{patient_id}", System.Uri.EscapeDataString(ConvertToString(patient_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<DescendantCollectionItem>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<DescendantCollectionItem>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new GPlatformMuleException<object>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<DescendantCollectionItem>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.9.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class IdDescendantsDescendantClient : MulePatientEngagementClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public IdDescendantsDescendantClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });

            this.BaseUrl = baseUrl;
        }

        private string _baseUrl = string.Empty;
        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task IdAsync(string descendant_id, string patient_id)
        {
            return IdAsync(descendant_id, patient_id, System.Threading.CancellationToken.None);
        }

        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task IdAsync(string descendant_id, string patient_id, System.Threading.CancellationToken cancellationToken)
        {
            if (descendant_id == null)
                throw new System.ArgumentNullException("descendant_id");

            if (patient_id == null)
                throw new System.ArgumentNullException("patient_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/patients/{patient_id}/descendants/{descendant_id}");
            urlBuilder_.Replace("{descendant_id}", System.Uri.EscapeDataString(ConvertToString(descendant_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{patient_id}", System.Uri.EscapeDataString(ConvertToString(patient_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task IdChangeColorAsync(ChangeColor body, string descendant_id, string patient_id)
        {
            return IdChangeColorAsync(body, descendant_id, patient_id, System.Threading.CancellationToken.None);
        }

        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task IdChangeColorAsync(ChangeColor body, string descendant_id, string patient_id, System.Threading.CancellationToken cancellationToken)
        {
            if (descendant_id == null)
                throw new System.ArgumentNullException("descendant_id");

            if (patient_id == null)
                throw new System.ArgumentNullException("patient_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/patients/{patient_id}/descendants/{descendant_id}/change-color");
            urlBuilder_.Replace("{descendant_id}", System.Uri.EscapeDataString(ConvertToString(descendant_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{patient_id}", System.Uri.EscapeDataString(ConvertToString(patient_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.9.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class GETClient : MulePatientEngagementClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public GETClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });

            this.BaseUrl = baseUrl;
        }

        private string _baseUrl = string.Empty;
        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="ids">List of ids of the Staff.</param>
        /// <param name="facility_ids">List of ids of the Facilities the staff must operate on.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Staff that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Staff>> StaffAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> facility_ids, string search_query, int? skip, int? take)
        {
            return StaffAsync(ids, facility_ids, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="ids">List of ids of the Staff.</param>
        /// <param name="facility_ids">List of ids of the Facilities the staff must operate on.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Staff that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Staff>> StaffAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> facility_ids, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/staff?");
            if (ids != null) foreach (var item_ in ids) { urlBuilder_.Append("ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Staff>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Staff>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Staff>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="id">The id of the Staff to get its associated information.</param>
        /// <returns>The CV found for the given Staff member.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StaffCV> StaffIdCvAsync(int id)
        {
            return StaffIdCvAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="id">The id of the Staff to get its associated information.</param>
        /// <returns>The CV found for the given Staff member.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<StaffCV> StaffIdCvAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/staff/{id}/cv");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(StaffCV);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<StaffCV>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(StaffCV);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="ids">List of ids of the Specialities.</param>
        /// <param name="facility_ids">List of ids of the Facilities where the Specialities must be provided.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Specialities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Speciality>> SpecialitiesAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> facility_ids, string search_query, int? skip, int? take)
        {
            return SpecialitiesAsync(ids, facility_ids, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="ids">List of ids of the Specialities.</param>
        /// <param name="facility_ids">List of ids of the Facilities where the Specialities must be provided.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Specialities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Speciality>> SpecialitiesAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> facility_ids, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/specialities?");
            if (ids != null) foreach (var item_ in ids) { urlBuilder_.Append("ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Speciality>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Speciality>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Speciality>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="ids">List of ids of the Medical Acts.</param>
        /// <param name="facility_ids">List of ids of the Facilities where the Medical Acts must be provided.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Medical Acts that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MedicalAct>> MedicalActsAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> facility_ids, string search_query, int? skip, int? take)
        {
            return MedicalActsAsync(ids, facility_ids, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="ids">List of ids of the Medical Acts.</param>
        /// <param name="facility_ids">List of ids of the Facilities where the Medical Acts must be provided.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Medical Acts that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MedicalAct>> MedicalActsAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> facility_ids, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/medical-acts?");
            if (ids != null) foreach (var item_ in ids) { urlBuilder_.Append("ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<MedicalAct>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<MedicalAct>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<MedicalAct>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="ids">List of ids of the Facilities.</param>
        /// <param name="location_ids">List of ids of the locations where the Facilities should be located.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Facilities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Facility>> FacilitiesAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> location_ids, string search_query, int? skip, int? take)
        {
            return FacilitiesAsync(ids, location_ids, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="ids">List of ids of the Facilities.</param>
        /// <param name="location_ids">List of ids of the locations where the Facilities should be located.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Facilities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Facility>> FacilitiesAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> location_ids, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/facilities?");
            if (ids != null) foreach (var item_ in ids) { urlBuilder_.Append("ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (location_ids != null) foreach (var item_ in location_ids) { urlBuilder_.Append("location_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Facility>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Facility>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Facility>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <param name="id">The id of the Facility to get its associated information.</param>
        /// <returns>List of found Info for given Facility.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ContextInfo>> FacilitiesIdInfoAsync(int? skip, int? take, int id)
        {
            return FacilitiesIdInfoAsync(skip, take, id, System.Threading.CancellationToken.None);
        }

        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <param name="id">The id of the Facility to get its associated information.</param>
        /// <returns>List of found Info for given Facility.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ContextInfo>> FacilitiesIdInfoAsync(int? skip, int? take, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/facilities/{id}/info?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ContextInfo>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ContextInfo>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("Facility not found.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<ContextInfo>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="facility_ids">List of ids of the Facilities where the offer arrangement must be provided.</param>
        /// <param name="speciality_id">The id of the Speciality which the offer arrangement pertains to.</param>
        /// <param name="staff_id">The id of the Staff who must perform the offer arrangement.</param>
        /// <param name="medical_act_id">The id of the Medical Act of the offer arrangement.</param>
        /// <param name="medical_act_type">The type of the Medical Act of the offer arrangement.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity that must cover all of the offer arrangement.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found offer that match the given query. Represented by a space separated string containing the id and description of the all the entities in the offer.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Offer>> OfferAsync(string search_query, System.Collections.Generic.IEnumerable<int> facility_ids, int? speciality_id, int? staff_id, int? medical_act_id, Medical_act_type? medical_act_type, int? financial_entity_id, int? skip, int? take)
        {
            return OfferAsync(search_query, facility_ids, speciality_id, staff_id, medical_act_id, medical_act_type, financial_entity_id, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="facility_ids">List of ids of the Facilities where the offer arrangement must be provided.</param>
        /// <param name="speciality_id">The id of the Speciality which the offer arrangement pertains to.</param>
        /// <param name="staff_id">The id of the Staff who must perform the offer arrangement.</param>
        /// <param name="medical_act_id">The id of the Medical Act of the offer arrangement.</param>
        /// <param name="medical_act_type">The type of the Medical Act of the offer arrangement.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity that must cover all of the offer arrangement.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found offer that match the given query. Represented by a space separated string containing the id and description of the all the entities in the offer.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Offer>> OfferAsync(string search_query, System.Collections.Generic.IEnumerable<int> facility_ids, int? speciality_id, int? staff_id, int? medical_act_id, Medical_act_type? medical_act_type, int? financial_entity_id, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            if (search_query == null)
                throw new System.ArgumentNullException("search_query");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/offer?");
            urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (speciality_id != null) urlBuilder_.Append("speciality_id=").Append(System.Uri.EscapeDataString(ConvertToString(speciality_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (staff_id != null) urlBuilder_.Append("staff_id=").Append(System.Uri.EscapeDataString(ConvertToString(staff_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (medical_act_id != null) urlBuilder_.Append("medical_act_id=").Append(System.Uri.EscapeDataString(ConvertToString(medical_act_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (medical_act_type != null) urlBuilder_.Append("medical_act_type=").Append(System.Uri.EscapeDataString(ConvertToString(medical_act_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (financial_entity_id != null) urlBuilder_.Append("financial_entity_id=").Append(System.Uri.EscapeDataString(ConvertToString(financial_entity_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Offer>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Offer>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Offer>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="facility_ids">List of ids of the Facilities the Staff must operate on.</param>
        /// <param name="speciality_id">The id of the Speciality the staff must specialize on.</param>
        /// <param name="medical_act_id">The id of the Medical act the staff must be able to perform.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity that must cover the staff.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Staff that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Staff>> OfferStaffAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? speciality_id, int? medical_act_id, int? financial_entity_id, string search_query, int? skip, int? take)
        {
            return OfferStaffAsync(facility_ids, speciality_id, medical_act_id, financial_entity_id, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="facility_ids">List of ids of the Facilities the Staff must operate on.</param>
        /// <param name="speciality_id">The id of the Speciality the staff must specialize on.</param>
        /// <param name="medical_act_id">The id of the Medical act the staff must be able to perform.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity that must cover the staff.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Staff that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Staff>> OfferStaffAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? speciality_id, int? medical_act_id, int? financial_entity_id, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/offer/staff?");
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (speciality_id != null) urlBuilder_.Append("speciality_id=").Append(System.Uri.EscapeDataString(ConvertToString(speciality_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (medical_act_id != null) urlBuilder_.Append("medical_act_id=").Append(System.Uri.EscapeDataString(ConvertToString(medical_act_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (financial_entity_id != null) urlBuilder_.Append("financial_entity_id=").Append(System.Uri.EscapeDataString(ConvertToString(financial_entity_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Staff>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Staff>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Staff>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="facility_ids">List of ids of the Facilities where the Specialities must be provided.</param>
        /// <param name="staff_id">The id of the Staff who must specialize on the Specialities.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity that must cover the Specialities.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Specialities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Speciality>> OfferSpecialitiesAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? staff_id, int? financial_entity_id, string search_query, int? skip, int? take)
        {
            return OfferSpecialitiesAsync(facility_ids, staff_id, financial_entity_id, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="facility_ids">List of ids of the Facilities where the Specialities must be provided.</param>
        /// <param name="staff_id">The id of the Staff who must specialize on the Specialities.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity that must cover the Specialities.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Specialities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Speciality>> OfferSpecialitiesAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? staff_id, int? financial_entity_id, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/offer/specialities?");
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (staff_id != null) urlBuilder_.Append("staff_id=").Append(System.Uri.EscapeDataString(ConvertToString(staff_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (financial_entity_id != null) urlBuilder_.Append("financial_entity_id=").Append(System.Uri.EscapeDataString(ConvertToString(financial_entity_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Speciality>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Speciality>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Speciality>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="facility_ids">List of ids of the Facilities where the Medical Acts must be provided.</param>
        /// <param name="speciality_id">The id of the Speciality which the Medical Acts pertains to.</param>
        /// <param name="staff_id">The id of the Staff who must perform the Medical Acts.</param>
        /// <param name="medical_act_type">The type of the Medical Act.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity that must cover the Medical Acts.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Medical Acts that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MedicalAct>> OfferMedicalActsAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? speciality_id, int? staff_id, Medical_act_type2? medical_act_type, int? financial_entity_id, string search_query, int? skip, int? take)
        {
            return OfferMedicalActsAsync(facility_ids, speciality_id, staff_id, medical_act_type, financial_entity_id, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="facility_ids">List of ids of the Facilities where the Medical Acts must be provided.</param>
        /// <param name="speciality_id">The id of the Speciality which the Medical Acts pertains to.</param>
        /// <param name="staff_id">The id of the Staff who must perform the Medical Acts.</param>
        /// <param name="medical_act_type">The type of the Medical Act.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity that must cover the Medical Acts.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Medical Acts that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MedicalAct>> OfferMedicalActsAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? speciality_id, int? staff_id, Medical_act_type2? medical_act_type, int? financial_entity_id, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/offer/medical-acts?");
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (speciality_id != null) urlBuilder_.Append("speciality_id=").Append(System.Uri.EscapeDataString(ConvertToString(speciality_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (staff_id != null) urlBuilder_.Append("staff_id=").Append(System.Uri.EscapeDataString(ConvertToString(staff_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (medical_act_type != null) urlBuilder_.Append("medical_act_type=").Append(System.Uri.EscapeDataString(ConvertToString(medical_act_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (financial_entity_id != null) urlBuilder_.Append("financial_entity_id=").Append(System.Uri.EscapeDataString(ConvertToString(financial_entity_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<MedicalAct>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<MedicalAct>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<MedicalAct>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="staff_id">The id of the Staff member who must operate at the Facilities.</param>
        /// <param name="speciality_id">The id of the Speciality which the Facilities must provide.</param>
        /// <param name="medical_act_id">The id of the Medical Act which the Facilities must provide.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity which the Facilities must be covered by.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Facilities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Facility>> OfferFacilitiesAsync(int? staff_id, int? speciality_id, int? medical_act_id, int? financial_entity_id, string search_query, int? skip, int? take)
        {
            return OfferFacilitiesAsync(staff_id, speciality_id, medical_act_id, financial_entity_id, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="staff_id">The id of the Staff member who must operate at the Facilities.</param>
        /// <param name="speciality_id">The id of the Speciality which the Facilities must provide.</param>
        /// <param name="medical_act_id">The id of the Medical Act which the Facilities must provide.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity which the Facilities must be covered by.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Facilities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Facility>> OfferFacilitiesAsync(int? staff_id, int? speciality_id, int? medical_act_id, int? financial_entity_id, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/offer/facilities?");
            if (staff_id != null) urlBuilder_.Append("staff_id=").Append(System.Uri.EscapeDataString(ConvertToString(staff_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (speciality_id != null) urlBuilder_.Append("speciality_id=").Append(System.Uri.EscapeDataString(ConvertToString(speciality_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (medical_act_id != null) urlBuilder_.Append("medical_act_id=").Append(System.Uri.EscapeDataString(ConvertToString(medical_act_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (financial_entity_id != null) urlBuilder_.Append("financial_entity_id=").Append(System.Uri.EscapeDataString(ConvertToString(financial_entity_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Facility>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Facility>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Facility>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="facility_ids">List of ids of the Facilities that must be covered.</param>
        /// <param name="staff_id">The id of the Staff member that must be covered.</param>
        /// <param name="speciality_id">The id of the Speciality that must be covered.</param>
        /// <param name="medical_act_id">The id of the Medical Act that must be covered.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Financial Entities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FinancialEntity>> OfferFinancialEntitiesAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? staff_id, int? speciality_id, int? medical_act_id, string search_query, int? skip, int? take)
        {
            return OfferFinancialEntitiesAsync(facility_ids, staff_id, speciality_id, medical_act_id, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="facility_ids">List of ids of the Facilities that must be covered.</param>
        /// <param name="staff_id">The id of the Staff member that must be covered.</param>
        /// <param name="speciality_id">The id of the Speciality that must be covered.</param>
        /// <param name="medical_act_id">The id of the Medical Act that must be covered.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Financial Entities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FinancialEntity>> OfferFinancialEntitiesAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? staff_id, int? speciality_id, int? medical_act_id, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/offer/financial-entities?");
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (staff_id != null) urlBuilder_.Append("staff_id=").Append(System.Uri.EscapeDataString(ConvertToString(staff_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (speciality_id != null) urlBuilder_.Append("speciality_id=").Append(System.Uri.EscapeDataString(ConvertToString(speciality_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (medical_act_id != null) urlBuilder_.Append("medical_act_id=").Append(System.Uri.EscapeDataString(ConvertToString(medical_act_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<FinancialEntity>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<FinancialEntity>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<FinancialEntity>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="facility_ids">List of ids of the Facilities where the Rubrics must be provided.</param>
        /// <param name="staff_id">The id of the Staff member who must perform the Rubrics.</param>
        /// <param name="speciality_id">The id of the Speciality which the Rubrics pertains to.</param>
        /// <param name="medical_act_id">The id of the Medical Act which the Rubrics pertains to.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity that must cover the Rubrics.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Rubrics that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Rubric>> OfferRubricsAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? staff_id, int? speciality_id, int? medical_act_id, int? financial_entity_id, string search_query, int? skip, int? take)
        {
            return OfferRubricsAsync(facility_ids, staff_id, speciality_id, medical_act_id, financial_entity_id, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="facility_ids">List of ids of the Facilities where the Rubrics must be provided.</param>
        /// <param name="staff_id">The id of the Staff member who must perform the Rubrics.</param>
        /// <param name="speciality_id">The id of the Speciality which the Rubrics pertains to.</param>
        /// <param name="medical_act_id">The id of the Medical Act which the Rubrics pertains to.</param>
        /// <param name="financial_entity_id">The id of the Financial Entity that must cover the Rubrics.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Rubrics that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Rubric>> OfferRubricsAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? staff_id, int? speciality_id, int? medical_act_id, int? financial_entity_id, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/offer/rubrics?");
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (staff_id != null) urlBuilder_.Append("staff_id=").Append(System.Uri.EscapeDataString(ConvertToString(staff_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (speciality_id != null) urlBuilder_.Append("speciality_id=").Append(System.Uri.EscapeDataString(ConvertToString(speciality_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (medical_act_id != null) urlBuilder_.Append("medical_act_id=").Append(System.Uri.EscapeDataString(ConvertToString(medical_act_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (financial_entity_id != null) urlBuilder_.Append("financial_entity_id=").Append(System.Uri.EscapeDataString(ConvertToString(financial_entity_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Rubric>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Rubric>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Rubric>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="facility_id">The facility id where the appointment was scheduled.</param>
        /// <param name="id">The appointment id to retrieve the associated notes description</param>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<NotesDescription> AppointmentsIdNotesDescriptionAsync(int facility_id, string id)
        {
            return AppointmentsIdNotesDescriptionAsync(facility_id, id, System.Threading.CancellationToken.None);
        }

        /// <param name="facility_id">The facility id where the appointment was scheduled.</param>
        /// <param name="id">The appointment id to retrieve the associated notes description</param>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<NotesDescription> AppointmentsIdNotesDescriptionAsync(int facility_id, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (facility_id == null)
                throw new System.ArgumentNullException("facility_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/appointments/{id}/notes-description?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("facility_id=").Append(System.Uri.EscapeDataString(ConvertToString(facility_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(NotesDescription);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<NotesDescription>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(NotesDescription);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="facility_ids">The facility ids to retrieve the associated notes description.</param>
        /// <param name="speciality_id">The speciality id to retrieve the associated notes description.</param>
        /// <param name="medical_act_id">The medical act id to retrieve the associated notes description.</param>
        /// <param name="rubric_id">The local rubric id to retrieve the associated notes description.</param>
        /// <param name="financial_entity_id">The financial entity id to retrieve the associated notes description.</param>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<NotesDescriptionByFacility>> AppointmentsNotesDescriptionAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? speciality_id, int? medical_act_id, int? rubric_id, int? financial_entity_id)
        {
            return AppointmentsNotesDescriptionAsync(facility_ids, speciality_id, medical_act_id, rubric_id, financial_entity_id, System.Threading.CancellationToken.None);
        }

        /// <param name="facility_ids">The facility ids to retrieve the associated notes description.</param>
        /// <param name="speciality_id">The speciality id to retrieve the associated notes description.</param>
        /// <param name="medical_act_id">The medical act id to retrieve the associated notes description.</param>
        /// <param name="rubric_id">The local rubric id to retrieve the associated notes description.</param>
        /// <param name="financial_entity_id">The financial entity id to retrieve the associated notes description.</param>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<NotesDescriptionByFacility>> AppointmentsNotesDescriptionAsync(System.Collections.Generic.IEnumerable<int> facility_ids, int? speciality_id, int? medical_act_id, int? rubric_id, int? financial_entity_id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/appointments/notes-description?");
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (speciality_id != null) urlBuilder_.Append("speciality_id=").Append(System.Uri.EscapeDataString(ConvertToString(speciality_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (medical_act_id != null) urlBuilder_.Append("medical_act_id=").Append(System.Uri.EscapeDataString(ConvertToString(medical_act_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (rubric_id != null) urlBuilder_.Append("rubric_id=").Append(System.Uri.EscapeDataString(ConvertToString(rubric_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (financial_entity_id != null) urlBuilder_.Append("financial_entity_id=").Append(System.Uri.EscapeDataString(ConvertToString(financial_entity_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<NotesDescriptionByFacility>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<NotesDescriptionByFacility>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<NotesDescriptionByFacility>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="ids">List of ids of the Financial Entities.</param>
        /// <param name="facility_ids">List of ids of the Facilities covered by the Financial Entities.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Financial Entities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FinancialEntity>> FinancialEntitiesAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> facility_ids, string search_query, int? skip, int? take)
        {
            return FinancialEntitiesAsync(ids, facility_ids, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="ids">List of ids of the Financial Entities.</param>
        /// <param name="facility_ids">List of ids of the Facilities covered by the Financial Entities.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Financial Entities that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FinancialEntity>> FinancialEntitiesAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> facility_ids, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/financial-entities?");
            if (ids != null) foreach (var item_ in ids) { urlBuilder_.Append("ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<FinancialEntity>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<FinancialEntity>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<FinancialEntity>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="facility_id">The facility id to retrieve the associated default financial entity</param>
        /// <param name="patient_id">The corporate patient id to retrieve the associated default financial entity</param>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FinancialEntity> FinancialEntitiesDefaultAsync(string facility_id, string patient_id)
        {
            return FinancialEntitiesDefaultAsync(facility_id, patient_id, System.Threading.CancellationToken.None);
        }

        /// <param name="facility_id">The facility id to retrieve the associated default financial entity</param>
        /// <param name="patient_id">The corporate patient id to retrieve the associated default financial entity</param>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<FinancialEntity> FinancialEntitiesDefaultAsync(string facility_id, string patient_id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/financial-entities/default?");
            if (facility_id != null) urlBuilder_.Append("facility_id=").Append(System.Uri.EscapeDataString(ConvertToString(facility_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (patient_id != null) urlBuilder_.Append("patient_id=").Append(System.Uri.EscapeDataString(ConvertToString(patient_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(FinancialEntity);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<FinancialEntity>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(FinancialEntity);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="ids">List of ids of the Rubrics.</param>
        /// <param name="facility_ids">List of ids of the Facilities where the Rubrics must be provided.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Rubrics that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Rubric>> RubricsAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> facility_ids, string search_query, int? skip, int? take)
        {
            return RubricsAsync(ids, facility_ids, search_query, skip, take, System.Threading.CancellationToken.None);
        }

        /// <param name="ids">List of ids of the Rubrics.</param>
        /// <param name="facility_ids">List of ids of the Facilities where the Rubrics must be provided.</param>
        /// <param name="search_query">A string that will be used to match all kinds of offer available, be it, medical acts, specialities, staff or facilities.</param>
        /// <param name="skip">Skip over a number of elements by specifying an offset value for the query.</param>
        /// <param name="take">Limit the number of elements on the response.</param>
        /// <returns>Found Rubrics that match all given criteria.</returns>
        /// <exception cref="GPlatformMuleException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Rubric>> RubricsAsync(System.Collections.Generic.IEnumerable<int> ids, System.Collections.Generic.IEnumerable<int> facility_ids, string search_query, int? skip, int? take, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rubrics?");
            if (ids != null) foreach (var item_ in ids) { urlBuilder_.Append("ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (facility_ids != null) foreach (var item_ in facility_ids) { urlBuilder_.Append("facility_ids=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (search_query != null) urlBuilder_.Append("search_query=").Append(System.Uri.EscapeDataString(ConvertToString(search_query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (take != null) urlBuilder_.Append("take=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Rubric>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Rubric>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new GPlatformMuleException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new GPlatformMuleException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Rubric>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChangeColor : System.ComponentModel.INotifyPropertyChanged
    {
        private string _color;

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Color
        {
            get { return _color; }
            set
            {
                if (_color != value)
                {
                    _color = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ChangeColor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangeColor>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Staff.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Staff : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private string _name;
        private string _personal_number;
        private string _professional_number;
        private string _role;
        private string _short_name;
        private string _title;

        /// <summary>Unique id of the staff member.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Staff member's name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Staff member's personal contact number.</summary>
        [Newtonsoft.Json.JsonProperty("personal_number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Personal_number
        {
            get { return _personal_number; }
            set
            {
                if (_personal_number != value)
                {
                    _personal_number = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Staff member's professional contact number.</summary>
        [Newtonsoft.Json.JsonProperty("professional_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Professional_number
        {
            get { return _professional_number; }
            set
            {
                if (_professional_number != value)
                {
                    _professional_number = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Staff member's role.</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role
        {
            get { return _role; }
            set
            {
                if (_role != value)
                {
                    _role = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Staff member's shortname.</summary>
        [Newtonsoft.Json.JsonProperty("short_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Short_name
        {
            get { return _short_name; }
            set
            {
                if (_short_name != value)
                {
                    _short_name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Staff member's title.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Staff FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Staff>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Staff CV.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StaffCV : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private string _title;
        private string _data_type;
        private string _data;

        /// <summary>Unique id of the Staff CV.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Staff CV title.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Staff CV content type.</summary>
        [Newtonsoft.Json.JsonProperty("data_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data_type
        {
            get { return _data_type; }
            set
            {
                if (_data_type != value)
                {
                    _data_type = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Staff CV content data.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StaffCV FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StaffCV>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Medical Act.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MedicalAct : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private string _code;
        private string _description;
        private int _speciality_id;
        private MedicalActType _type;
        private bool _has_follow_up;

        /// <summary>Unique id of the Act.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Act's code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Description of the Act.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unique id of the speciality associated to the Act.</summary>
        [Newtonsoft.Json.JsonProperty("speciality_id", Required = Newtonsoft.Json.Required.Always)]
        public int Speciality_id
        {
            get { return _speciality_id; }
            set
            {
                if (_speciality_id != value)
                {
                    _speciality_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Act type, whether it's an 'exam' or an 'consult'.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MedicalActType Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Whether this Act allows a follow-up version of itself.</summary>
        [Newtonsoft.Json.JsonProperty("has_follow_up", Required = Newtonsoft.Json.Required.Always)]
        public bool Has_follow_up
        {
            get { return _has_follow_up; }
            set
            {
                if (_has_follow_up != value)
                {
                    _has_follow_up = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MedicalAct FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MedicalAct>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Medical speciality.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Speciality : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private string _code;
        private string _description;

        /// <summary>Unique id of the speciality.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Speciality's code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Description of the speciality.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Speciality FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Speciality>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>General Offer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Offer : System.ComponentModel.INotifyPropertyChanged
    {
        private int _medical_act_id;
        private string _medical_act_description;
        private int _speciality_id;
        private string _speciality_description;
        private int _facility_id;
        private string _facility_name;
        private int _location_id;
        private string _location_description;
        private int _rubric_id;
        private string _rubric_description;
        private int _staff_id;
        private string _staff_name;

        /// <summary>Unique id of the Medical Act associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("medical_act_id", Required = Newtonsoft.Json.Required.Always)]
        public int Medical_act_id
        {
            get { return _medical_act_id; }
            set
            {
                if (_medical_act_id != value)
                {
                    _medical_act_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Description of the Medical Act associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("medical_act_description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Medical_act_description
        {
            get { return _medical_act_description; }
            set
            {
                if (_medical_act_description != value)
                {
                    _medical_act_description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unique id of the Speciality associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("speciality_id", Required = Newtonsoft.Json.Required.Always)]
        public int Speciality_id
        {
            get { return _speciality_id; }
            set
            {
                if (_speciality_id != value)
                {
                    _speciality_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Description of the Speciality associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("speciality_description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Speciality_description
        {
            get { return _speciality_description; }
            set
            {
                if (_speciality_description != value)
                {
                    _speciality_description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unique id of the Facility associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("facility_id", Required = Newtonsoft.Json.Required.Always)]
        public int Facility_id
        {
            get { return _facility_id; }
            set
            {
                if (_facility_id != value)
                {
                    _facility_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name of the Facility associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("facility_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Facility_name
        {
            get { return _facility_name; }
            set
            {
                if (_facility_name != value)
                {
                    _facility_name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unique id of the Facility's location associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.Always)]
        public int Location_id
        {
            get { return _location_id; }
            set
            {
                if (_location_id != value)
                {
                    _location_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Description of the Facility's location associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("location_description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location_description
        {
            get { return _location_description; }
            set
            {
                if (_location_description != value)
                {
                    _location_description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unique id of the Rubric associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("rubric_id", Required = Newtonsoft.Json.Required.Always)]
        public int Rubric_id
        {
            get { return _rubric_id; }
            set
            {
                if (_rubric_id != value)
                {
                    _rubric_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Description of the Rubric associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("rubric_description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Rubric_description
        {
            get { return _rubric_description; }
            set
            {
                if (_rubric_description != value)
                {
                    _rubric_description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unique id of the staff member associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("staff_id", Required = Newtonsoft.Json.Required.Always)]
        public int Staff_id
        {
            get { return _staff_id; }
            set
            {
                if (_staff_id != value)
                {
                    _staff_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name of the staff member associated to this offer arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("staff_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Staff_name
        {
            get { return _staff_name; }
            set
            {
                if (_staff_name != value)
                {
                    _staff_name = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Offer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Offer>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Facility.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Facility : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private string _code;
        private string _name;
        private int _location_id;
        private string _location_description;
        private string _abbreviation;
        private int? _order;
        private string _external_facility_id;
        private FacilityType _type;

        /// <summary>Unique id of the facility.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The facility code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The facility name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The id that represents the facility location.</summary>
        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.Always)]
        public int Location_id
        {
            get { return _location_id; }
            set
            {
                if (_location_id != value)
                {
                    _location_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The description of the facility location.</summary>
        [Newtonsoft.Json.JsonProperty("location_description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location_description
        {
            get { return _location_description; }
            set
            {
                if (_location_description != value)
                {
                    _location_description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The facility abbreviation.</summary>
        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Abbreviation
        {
            get { return _abbreviation; }
            set
            {
                if (_abbreviation != value)
                {
                    _abbreviation = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Allows the definition of priorities to the facility.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order
        {
            get { return _order; }
            set
            {
                if (_order != value)
                {
                    _order = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The external facility id that can be used by external clients.</summary>
        [Newtonsoft.Json.JsonProperty("external_facility_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_facility_id
        {
            get { return _external_facility_id; }
            set
            {
                if (_external_facility_id != value)
                {
                    _external_facility_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The type of the facility. It can be either a normal facility or an harvest station.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FacilityType Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Facility FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Facility>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Appointment Notes Description</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NotesDescription : System.ComponentModel.INotifyPropertyChanged
    {
        private string _notes_description;

        /// <summary>The notes description</summary>
        [Newtonsoft.Json.JsonProperty("notes_description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Notes_description
        {
            get { return _notes_description; }
            set
            {
                if (_notes_description != value)
                {
                    _notes_description = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NotesDescription FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotesDescription>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Appointment Notes Description</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NotesDescriptionByFacility : System.ComponentModel.INotifyPropertyChanged
    {
        private double _facility_id;
        private string _notes_description;

        /// <summary>The facility id to which the notes description belongs to</summary>
        [Newtonsoft.Json.JsonProperty("facility_id", Required = Newtonsoft.Json.Required.Always)]
        public double Facility_id
        {
            get { return _facility_id; }
            set
            {
                if (_facility_id != value)
                {
                    _facility_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The notes description</summary>
        [Newtonsoft.Json.JsonProperty("notes_description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Notes_description
        {
            get { return _notes_description; }
            set
            {
                if (_notes_description != value)
                {
                    _notes_description = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NotesDescriptionByFacility FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotesDescriptionByFacility>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Default Financial Entity Code</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FinancialEntity : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private string _code;
        private string _description;

        /// <summary>The unique id of the financial entity</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The financial entity code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The financial entity description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static FinancialEntity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FinancialEntity>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Facility context info.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContextInfo : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int _facility_id;
        private string _context;
        private string _sub_context;
        private string _title;
        private string _title_info;
        private string _text;
        private string _url_logo_small;
        private string _url_logo_big;
        private string _info_url_logo_small;
        private string _info_url_logo_big;

        /// <summary>Unique id of the info.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The id of the Facility to get the context information.</summary>
        [Newtonsoft.Json.JsonProperty("facility_id", Required = Newtonsoft.Json.Required.Always)]
        public int Facility_id
        {
            get { return _facility_id; }
            set
            {
                if (_facility_id != value)
                {
                    _facility_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The type of the context.</summary>
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Context
        {
            get { return _context; }
            set
            {
                if (_context != value)
                {
                    _context = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The subtype of the context information.</summary>
        [Newtonsoft.Json.JsonProperty("sub_context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub_context
        {
            get { return _sub_context; }
            set
            {
                if (_sub_context != value)
                {
                    _sub_context = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The title of the context.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The subtitle of the context information.</summary>
        [Newtonsoft.Json.JsonProperty("title_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title_info
        {
            get { return _title_info; }
            set
            {
                if (_title_info != value)
                {
                    _title_info = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The value of the context information itself.</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text
        {
            get { return _text; }
            set
            {
                if (_text != value)
                {
                    _text = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The URL for the small logo of the context.</summary>
        [Newtonsoft.Json.JsonProperty("url_logo_small", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url_logo_small
        {
            get { return _url_logo_small; }
            set
            {
                if (_url_logo_small != value)
                {
                    _url_logo_small = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The URL for the big logo of the context.</summary>
        [Newtonsoft.Json.JsonProperty("url_logo_big", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url_logo_big
        {
            get { return _url_logo_big; }
            set
            {
                if (_url_logo_big != value)
                {
                    _url_logo_big = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The URL for the small logo of the context information.</summary>
        [Newtonsoft.Json.JsonProperty("info_url_logo_small", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Info_url_logo_small
        {
            get { return _info_url_logo_small; }
            set
            {
                if (_info_url_logo_small != value)
                {
                    _info_url_logo_small = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The URL for the big logo of the context information.</summary>
        [Newtonsoft.Json.JsonProperty("info_url_logo_big", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Info_url_logo_big
        {
            get { return _info_url_logo_big; }
            set
            {
                if (_info_url_logo_big != value)
                {
                    _info_url_logo_big = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContextInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContextInfo>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Rubric.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Rubric : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private string _code;
        private string _description;

        /// <summary>Unique id of the Rubric.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Rubric's code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Description of the Rubric.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Rubric FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Rubric>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Patient Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Patient : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _name;
        private System.DateTime? _birthdate;
        private string _address;
        private string _address_local;
        private string _address_zip_code;
        private string _first_phone_number;
        private string _second_phone_number;
        private string _gender;
        private string _citizen_number;
        private string _ssn;
        private string _tax_number;
        private string _email;
        private bool? _temporary;
        private bool? _updated;
        private System.DateTime? _updated_datetime;

        /// <summary>Patient identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Birthdate</summary>
        [Newtonsoft.Json.JsonProperty("birthdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Birthdate
        {
            get { return _birthdate; }
            set
            {
                if (_birthdate != value)
                {
                    _birthdate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Address</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Address Local</summary>
        [Newtonsoft.Json.JsonProperty("address_local", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_local
        {
            get { return _address_local; }
            set
            {
                if (_address_local != value)
                {
                    _address_local = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Address Zip Code</summary>
        [Newtonsoft.Json.JsonProperty("address_zip_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_zip_code
        {
            get { return _address_zip_code; }
            set
            {
                if (_address_zip_code != value)
                {
                    _address_zip_code = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Primary phone number </summary>
        [Newtonsoft.Json.JsonProperty("first_phone_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_phone_number
        {
            get { return _first_phone_number; }
            set
            {
                if (_first_phone_number != value)
                {
                    _first_phone_number = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Secondary phone number</summary>
        [Newtonsoft.Json.JsonProperty("second_phone_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Second_phone_number
        {
            get { return _second_phone_number; }
            set
            {
                if (_second_phone_number != value)
                {
                    _second_phone_number = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Gender</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender
        {
            get { return _gender; }
            set
            {
                if (_gender != value)
                {
                    _gender = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Citizen Number</summary>
        [Newtonsoft.Json.JsonProperty("citizen_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Citizen_number
        {
            get { return _citizen_number; }
            set
            {
                if (_citizen_number != value)
                {
                    _citizen_number = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Ssn</summary>
        [Newtonsoft.Json.JsonProperty("ssn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssn
        {
            get { return _ssn; }
            set
            {
                if (_ssn != value)
                {
                    _ssn = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>tax Number</summary>
        [Newtonsoft.Json.JsonProperty("tax_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tax_number
        {
            get { return _tax_number; }
            set
            {
                if (_tax_number != value)
                {
                    _tax_number = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Email</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Is patient temporary</summary>
        [Newtonsoft.Json.JsonProperty("temporary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Temporary
        {
            get { return _temporary; }
            set
            {
                if (_temporary != value)
                {
                    _temporary = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Is patient information updated</summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>updated_datetime</summary>
        [Newtonsoft.Json.JsonProperty("updated_datetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Updated_datetime
        {
            get { return _updated_datetime; }
            set
            {
                if (_updated_datetime != value)
                {
                    _updated_datetime = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Patient FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Patient>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Descendant Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Descendant : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _name;
        private System.DateTime? _birthdate;
        private string _address;
        private string _address_local;
        private string _address_zip_code;
        private string _first_phone_number;
        private string _second_phone_number;
        private string _gender;
        private string _citizen_number;
        private string _ssn;
        private string _tax_number;
        private string _email;
        private bool _temporary;
        private string _color;
        private string _patient_id;
        private bool? _valid;

        /// <summary>Patient identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Birthdate</summary>
        [Newtonsoft.Json.JsonProperty("birthdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Birthdate
        {
            get { return _birthdate; }
            set
            {
                if (_birthdate != value)
                {
                    _birthdate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Address</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Address Local</summary>
        [Newtonsoft.Json.JsonProperty("address_local", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_local
        {
            get { return _address_local; }
            set
            {
                if (_address_local != value)
                {
                    _address_local = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Address Zip Code</summary>
        [Newtonsoft.Json.JsonProperty("address_zip_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_zip_code
        {
            get { return _address_zip_code; }
            set
            {
                if (_address_zip_code != value)
                {
                    _address_zip_code = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Primary phone number </summary>
        [Newtonsoft.Json.JsonProperty("first_phone_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_phone_number
        {
            get { return _first_phone_number; }
            set
            {
                if (_first_phone_number != value)
                {
                    _first_phone_number = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Secondary phone number</summary>
        [Newtonsoft.Json.JsonProperty("second_phone_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Second_phone_number
        {
            get { return _second_phone_number; }
            set
            {
                if (_second_phone_number != value)
                {
                    _second_phone_number = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Gender</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender
        {
            get { return _gender; }
            set
            {
                if (_gender != value)
                {
                    _gender = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Citizen Number</summary>
        [Newtonsoft.Json.JsonProperty("citizen_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Citizen_number
        {
            get { return _citizen_number; }
            set
            {
                if (_citizen_number != value)
                {
                    _citizen_number = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Ssn</summary>
        [Newtonsoft.Json.JsonProperty("ssn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssn
        {
            get { return _ssn; }
            set
            {
                if (_ssn != value)
                {
                    _ssn = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>tax Number</summary>
        [Newtonsoft.Json.JsonProperty("tax_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tax_number
        {
            get { return _tax_number; }
            set
            {
                if (_tax_number != value)
                {
                    _tax_number = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Email</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Is patient temporary</summary>
        [Newtonsoft.Json.JsonProperty("temporary", Required = Newtonsoft.Json.Required.Always)]
        public bool Temporary
        {
            get { return _temporary; }
            set
            {
                if (_temporary != value)
                {
                    _temporary = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Descendant color</summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color
        {
            get { return _color; }
            set
            {
                if (_color != value)
                {
                    _color = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>patient idenftifier</summary>
        [Newtonsoft.Json.JsonProperty("patient_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patient_id
        {
            get { return _patient_id; }
            set
            {
                if (_patient_id != value)
                {
                    _patient_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Is patient valid</summary>
        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Valid
        {
            get { return _valid; }
            set
            {
                if (_valid != value)
                {
                    _valid = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Descendant FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Descendant>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Descendant collection item Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DescendantCollectionItem : System.ComponentModel.INotifyPropertyChanged
    {
        private string _patient_id;
        private System.DateTime? _birthdate;
        private string _color;
        private string _id;
        private string _name;
        private bool? _valid;

        /// <summary>Patient identifier</summary>
        [Newtonsoft.Json.JsonProperty("patient_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Patient_id
        {
            get { return _patient_id; }
            set
            {
                if (_patient_id != value)
                {
                    _patient_id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Birthdate</summary>
        [Newtonsoft.Json.JsonProperty("birthdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Birthdate
        {
            get { return _birthdate; }
            set
            {
                if (_birthdate != value)
                {
                    _birthdate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Descendant color</summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color
        {
            get { return _color; }
            set
            {
                if (_color != value)
                {
                    _color = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Descendant identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Descendant Name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Is descendant valid</summary>
        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Valid
        {
            get { return _valid; }
            set
            {
                if (_valid != value)
                {
                    _valid = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DescendantCollectionItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DescendantCollectionItem>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>The type of the Medical Act of the offer arrangement.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Medical_act_type
    {
        [System.Runtime.Serialization.EnumMember(Value = "Exam")]
        Exam = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Consult")]
        Consult = 1,

    }

    /// <summary>The type of the Medical Act.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Medical_act_type2
    {
        [System.Runtime.Serialization.EnumMember(Value = "Exam")]
        Exam = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Consult")]
        Consult = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MedicalActType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Exam")]
        Exam = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Consult")]
        Consult = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FacilityType
    {
        [System.Runtime.Serialization.EnumMember(Value = "FACILITY")]
        FACILITY = 0,

        [System.Runtime.Serialization.EnumMember(Value = "HARVEST_STATION")]
        HARVEST_STATION = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.9.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class GPlatformMuleException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public GPlatformMuleException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.9.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class GPlatformMuleException<TResult> : GPlatformMuleException
    {
        public TResult Result { get; private set; }

        public GPlatformMuleException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}